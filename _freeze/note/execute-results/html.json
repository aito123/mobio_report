{
  "hash": "a73efe2f421e1d492fb053bfefe78b4e",
  "result": {
    "markdown": "---\neval: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nIn this case, now we have 46 observations, which is less but is not 16 observations that is what we want.\n\nLet's focus our attention in the `session_uuid` of the 46 observations. We can see that `session_uuid` = 292d1290-51a2-4cf2-89e3-7d26628a19a5 repeats 3 times.\n\n\n::: {.cell}\n\n:::\n\n\nWe can see that even if this are the same session_uuid, the same observation, there are incongruencies with the following variables:\n\n-   **Upper-lower case problem**:\n\n    -   `standalone` : has values formatted true/false and also TRUE/FALSE.\n\n\n::: {.cell tbl-cap='Upper-lower case problem'}\n\n:::\n\n\n-   **Rounding problem:**\n\n    -   `o2level_pre, hrv_low_freq_sum_pre, hrv_high_freq_sum_pre, hrv_low_freq_sum_post, hrv_high_freq_sum_post` : the same observation could be rounded to the 6 decimal or sometimes more. Is probable that all numeric variables could have this problem.\n\n    -   `reported_stress_pre, reported_stress_post, mood_quality_pre, mood_quality_post` : the same observation sometimes has one decimal.\n\n\n::: {.cell tbl-cap='Rounding problem'}\n\n:::\n\n\n-   **Computing problem:**\n    -   `computed_stress_pre, computed_stress_post` : this variable has a **major issue**, because in some cases it reflects the accurate value (e.g 0.4224225) and in other cases its -1 (which is the default when de API finds missing values in this variable). This inconsistency could be a problem in the storage of the data when calling the API.\n\n\n::: {.cell tbl-cap='Computing problem'}\n\n:::\n\n\n-   **Update problem:**\n    -   `badge` : this is a different type of problem. Badge variable collects the information about the badges the user is rewarded. This field keeps updating through the duplicate observation.\n\n\n::: {.cell tbl-cap='Update problem'}\n\n:::\n\n\nThe **update problem** gives us some insight about the general problem in the database. We can see that the problem with the database is not a *duplicate problem* is a *record situation*.\n\n### Record situation\n\nUnderstanding the database as a record data can help us to solve the majority of the problems in the database.\n\nA solution for the record situation involves the following indications:\n\n1.  Rather than keep one of the duplicates randomnly, we can keep **the latest observation** of the recorded data.\n\n    1.  To know the latest observation in the data, we need a unique id for each observation.\n\n    2.  This approach can solve the **upper-lower case problem**, **rounding problem**, and **update problem**.\n\n2.  Although only applying the solution of the **latest observation** doesn't solve the **computing problem**. It's necessary to ensure that the preserved observation has the correct `computed_stress_pre`, `computed_stress_post` and not only -1 when is not the case.\n\n## Obj 2: Origin of the problem\n\nA hypothesis of the origin of the problem, knowing that is a record situation,\n\nIn collaboration with Backend team, we determined the origin of the problem was in the API.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}